{"version":3,"file":"component---src-templates-lesson-template-js-24db69ba181744b073f9.js","mappings":"kOAKA,MAAMA,E,QAASC,EAEA,SAASC,EAASC,GAC/B,IAAI,eAAEC,EAAc,kBAAEC,GAAsBF,EAAMG,KAElD,MAAMC,EAAWF,EAAkBG,MAChCC,KAAKC,GAAWA,EAAOC,KAAKC,cAC5BC,KAAKb,IAEF,YAAEY,EAAW,KAAEE,GAASV,EAExBW,EAAQR,EAASS,WAAWC,GAAOA,EAAGC,OAASN,EAAYM,OAE3DC,EACJJ,EAAQ,EACNK,EAAAA,cAACC,EAAAA,GAAI,CAACC,UAAU,OAAOC,GAAIhB,EAASQ,EAAQ,GAAGG,MAC7CE,EAAAA,cAAA,QAAME,UAAU,SAAQ,KACvB,IAAMf,EAASQ,EAAQ,GAAGS,OAE3B,KACAC,EACJV,EAAQR,EAASmB,OAAS,EACxBN,EAAAA,cAACC,EAAAA,GAAI,CAACC,UAAU,OAAOC,GAAIhB,EAASQ,EAAQ,GAAGG,MAC5CX,EAASQ,EAAQ,GAAGS,MAAQ,IAC7BJ,EAAAA,cAAA,QAAME,UAAU,SAAQ,MAExB,KACN,OACEF,EAAAA,cAAA,OAAKE,UAAU,oBACbF,EAAAA,cAAA,OAAKE,UAAU,UACbF,EAAAA,cAAA,UAAKR,EAAYY,OACjBJ,EAAAA,cAAA,UAAKR,EAAYe,MACjBP,EAAAA,cAAA,OACEE,UAAU,iBACVM,wBAAyB,CAAEC,OAAQf,KAErCM,EAAAA,cAAA,OAAKE,UAAU,gBACZH,EACAM,IAGLL,EAAAA,cAAA,OAAKE,UAAU,eAGrB,C,mBCjDA,SAASQ,EAAcC,GAIrB,IAHyB,cAGHC,KAAKD,GACzB,MAAM,IAAIE,MACLF,EAAG,8GAIV,MAAO,CARc,OAQAG,KAAKH,GAAK,GAPV,UAO2BG,KAAKH,GAAK,GAC5D,CAEA,MAAMI,EAAeJ,GACnBA,EACGK,MAAM,IACN3B,KAAI,CAAC4B,EAAMtB,IAAUsB,EAAKC,WAAW,GAAK,IAAMvB,IAChDwB,QAAO,CAACC,EAAKC,IAAUD,EAAMC,IA0BlCC,EAAOC,QAAQ,EAxBf,SAAgBC,EAAGC,GACjB,IAAIC,EAAQC,EAERH,EAAEI,YAAcJ,EAAEI,WAAWC,OAC/BH,EAASF,EAAEI,WAAWC,MACtBF,EAASF,EAAEG,WAAWC,QAEtBH,EAASF,EAAEK,MACXF,EAASF,EAAEI,OAGb,MAAOC,EAAMC,GAAQrB,EAAcgB,IAC5BM,EAAMC,GAAQvB,EAAciB,GAGnC,OAAIG,IAASE,EACJF,EAAOE,EAITjB,EAAagB,GAAQhB,EAAakB,EAC3C,C","sources":["webpack://complete-intro-to-computer-science/./src/templates/lessonTemplate.js","webpack://complete-intro-to-computer-science/./src/util/helpers.js"],"sourcesContent":["import React from \"react\";\nimport { Link } from \"gatsby-link\";\nimport { graphql } from \"gatsby\";\nimport * as helpers from \"../util/helpers\";\n\nconst sortFn = helpers.sorter;\n\nexport default function Template(props) {\n  let { markdownRemark, allMarkdownRemark } = props.data; // data.markdownRemark holds our post data\n\n  const sections = allMarkdownRemark.edges\n    .map((lesson) => lesson.node.frontmatter)\n    .sort(sortFn);\n\n  const { frontmatter, html } = markdownRemark;\n\n  const index = sections.findIndex((el) => el.path === frontmatter.path);\n\n  const prevLink =\n    index > 0 ? (\n      <Link className=\"prev\" to={sections[index - 1].path}>\n        <span className=\"arrow\">←</span>\n        {\" \" + sections[index - 1].title}\n      </Link>\n    ) : null;\n  const nextLink =\n    index < sections.length - 1 ? (\n      <Link className=\"next\" to={sections[index + 1].path}>\n        {sections[index + 1].title + \" \"}\n        <span className=\"arrow\">→</span>\n      </Link>\n    ) : null;\n  return (\n    <div className=\"lesson-container\">\n      <div className=\"lesson\">\n        <h1>{frontmatter.title}</h1>\n        <h2>{frontmatter.date}</h2>\n        <div\n          className=\"lesson-content\"\n          dangerouslySetInnerHTML={{ __html: html }}\n        />\n        <div className=\"lesson-links\">\n          {prevLink}\n          {nextLink}\n        </div>\n      </div>\n      <div className=\"details-bg\" />\n    </div>\n  );\n}\n\nexport const pageQuery = graphql`\n  query LessonByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        path\n        title\n        order\n        section\n        description\n      }\n    }\n    allMarkdownRemark(limit: 1000) {\n      edges {\n        node {\n          html\n          frontmatter {\n            path\n            title\n            order\n            section\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n","function splitSections(str) {\n  const validSectionTest = /^\\d+[A-Z]+$/;\n  const numbersRegex = /^\\d+/;\n  const lettersRegex = /[A-Z]+$/;\n  if (!validSectionTest.test(str)) {\n    throw new Error(\n      `${str} does not match the section format. It must be <numbers><capital letters>, like 16A or 5F (case sensitive)`\n    );\n  }\n\n  return [numbersRegex.exec(str)[0], lettersRegex.exec(str)[0]];\n}\n\nconst getCharScore = str =>\n  str\n    .split(\"\")\n    .map((char, index) => char.charCodeAt(0) * 10 ** index)\n    .reduce((acc, score) => acc + score);\n\nfunction sorter(a, b) {\n  let aOrder, bOrder;\n\n  if (a.attributes && a.attributes.order) {\n    aOrder = a.attributes.order;\n    bOrder = b.attributes.order;\n  } else {\n    aOrder = a.order;\n    bOrder = b.order;\n  }\n\n  const [aSec, aSub] = splitSections(aOrder);\n  const [bSec, bSub] = splitSections(bOrder);\n\n  // sections first\n  if (aSec !== bSec) {\n    return aSec - bSec;\n  }\n\n  // subsections next\n  return getCharScore(aSub) - getCharScore(bSub);\n}\n\nmodule.exports.splitSections = splitSections;\nmodule.exports.sorter = sorter;\n"],"names":["sortFn","helpers","Template","props","markdownRemark","allMarkdownRemark","data","sections","edges","map","lesson","node","frontmatter","sort","html","index","findIndex","el","path","prevLink","React","Link","className","to","title","nextLink","length","date","dangerouslySetInnerHTML","__html","splitSections","str","test","Error","exec","getCharScore","split","char","charCodeAt","reduce","acc","score","module","exports","a","b","aOrder","bOrder","attributes","order","aSec","aSub","bSec","bSub"],"sourceRoot":""}